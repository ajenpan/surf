syntax = "proto3";

package game.guandan;
option go_package = "game/guandan";
option csharp_namespace = "game.guandan";

enum StageType {
  Stage_None = 0;          // 无效
  Stage_GameStart = 12;    // 开局
  Stage_DoubleBet = 16;    // 加倍
  Stage_DealingCards = 20; // 发牌
  Stage_Gaming = 30;       // 对局
  Stage_Tally = 40;        // 小结算
  Stage_FinalResult = 41;  // 大结算
}

enum DeckType {
  Deck_Pass = 0;          // 过
  Deck_Single = 1;        // 单张
  Deck_Pair = 2;          // 对子
  Deck_Three = 3;         // 3张
  Deck_ThreeWithTwo = 4;  // 3带2
  Deck_Straight = 5;      // 顺子
  Deck_StraightFlush = 6; // 同花顺
  Deck_StraightPair = 7;  // 连对
  Deck_StraightThree = 8; // 钢板 （2 个连续的三张牌）
  Deck_Bomb4 = 9;         // 4炸
  Deck_Bomb5 = 10;        // 5炸
  Deck_Bomb6 = 11;        // 6炸
  Deck_Bomb7 = 12;        // 7炸
  Deck_Bomb8 = 13;        // 8炸
  Deck_Bomb9 = 14;        // 9炸
  Deck_Bomb10 = 15;       // 10炸
  Deck_BombJoker = 16;    // 王炸
  Deck_Windflow = 17;     // 接风
}

// 出牌信息
message OutCardInfo {
  DeckType deck_type = 1;
  int32 deck_value = 2; // 牌值, 用于比较相同类型牌的大小. 如:同样是4炸, deck_value 为 4 表示4张4, 为 5 表示4张5, 显然5大于4
  bytes cards = 3;
}

message PlayerGameInfo {
  int32 user_id = 1;
  int32 seat_id = 2;

  int64 score = 4;

  int32 double_bet = 6; // 加倍倍率
  bytes hand_cards = 7; // 手牌
  OutCardInfo curr_out_card = 8;
}

message GameConf {
  int32 wildcard = 1;
}

message GameInfo {
  StageType stage = 1;
  int32 sub_stage = 2;
  GameConf conf = 3;
  map<int32, PlayerGameInfo> player_info = 5;

  int32 curr_action_power_seatid = 16;
}

message ReqGameInfo {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3001;
  }
}

message RespGameInfo {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3002;
  }
  GameInfo game_info = 1;
}

message ReqPlayerOutCards {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3005;
  }
  OutCardInfo out_cards = 1;
}

message RespPlayerOutCards {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3006;
  }
  int32 flag = 1;
  string errmsg = 2;
  bytes hand_cards = 3; // 出牌后剩下的手牌
}

message NotifyPlayerOutCards {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3106;
  }
  int32 seat_id = 1;
  OutCardInfo out_cards = 2;
}

message ReqPlayerDoubleBet {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3007;
  }
  int32 double_bet = 1;
}

message RespPlayerDoubleBet {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3008;
  }
  int32 flag = 1;
  string errmsg = 2;
}

message NotifyPlayerDoubleBet {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3105;
  }
  int32 seat_id = 1;
  int32 double_bet = 2;
}

message NotifyGameStage {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3101;
  }

  StageType last_stage = 1; // 上一个状态
  StageType curr_stage = 2; // 当前状态
  int32 curr_sub_stage = 3;

  int64 deadline = 13; // 截止时间, unix时间戳, 秒
  int32 downtime = 14; // 参考倒计时,秒, 以截至时间为准
}

message NotifyPlayerHandCards {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3107;
  }
  int32 seat_id = 1;
  bytes cards = 3;
}

message DoubleBetConf {
  bool super_double = 1; // 是否可以超级加倍
}

message NotifyPlayerDoubleBetPower {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3108;
  }
  int32 seat_id = 1;
  DoubleBetConf conf = 2;
  int64 deadline = 3; // 截止时间, unix时间戳, 秒
  int32 downtime = 4; // 参考倒计时,秒, 以截至时间为准
}

message OutCardConf {
  enum OutCardPowerType {
    Normal = 0;
    Windflow = 1;
    FirstOut = 2;
  }

  bool enable_pass = 1;            // 是否可以 `不出` (pass)
  OutCardPowerType power_type = 2; // 出牌权力类型
}

message NotifyPlayerOutCardPower {
  enum MSGID {
    _INVALID_ = 0;
    ID = 3109;
  }
  int32 seat_id = 1;
  OutCardConf conf = 2;
  int64 deadline = 3; // 截止时间, unix时间戳, 秒
  int32 downtime = 4; // 参考倒计时,秒, 以截至时间为准
}