// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.18.1
// source: game/guandan/guandan.proto

package guandan

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageType int32

const (
	StageType_StageNone         StageType = 0  // 无效
	StageType_StageGameStart    StageType = 12 // 开局
	StageType_StageDoubleRate   StageType = 16 // 加倍
	StageType_StageDealingCards StageType = 20 // 发牌
	StageType_StageGaming       StageType = 30 // 对局
	StageType_StageTally        StageType = 40 // 小结算
	StageType_StageFinalResult  StageType = 41 // 大结算
)

// Enum value maps for StageType.
var (
	StageType_name = map[int32]string{
		0:  "StageNone",
		12: "StageGameStart",
		16: "StageDoubleRate",
		20: "StageDealingCards",
		30: "StageGaming",
		40: "StageTally",
		41: "StageFinalResult",
	}
	StageType_value = map[string]int32{
		"StageNone":         0,
		"StageGameStart":    12,
		"StageDoubleRate":   16,
		"StageDealingCards": 20,
		"StageGaming":       30,
		"StageTally":        40,
		"StageFinalResult":  41,
	}
)

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}

func (x StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[0].Descriptor()
}

func (StageType) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[0]
}

func (x StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageType.Descriptor instead.
func (StageType) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{0}
}

type DeckType int32

const (
	DeckType_deck_pass           DeckType = 0  // 过
	DeckType_deck_single         DeckType = 1  // 单张
	DeckType_deck_pair           DeckType = 2  // 对子
	DeckType_deck_three          DeckType = 3  // 3张
	DeckType_deck_three_with_two DeckType = 4  // 3带2
	DeckType_deck_straight       DeckType = 5  // 顺子
	DeckType_deck_flush_straight DeckType = 6  // 同花顺
	DeckType_deck_straight_pair  DeckType = 7  // 连对
	DeckType_deck_straight_three DeckType = 8  // 钢板 （2 个连续的三张牌）
	DeckType_deck_bomb4          DeckType = 9  // 4炸
	DeckType_deck_bomb5          DeckType = 10 // 5炸
	DeckType_deck_bomb6          DeckType = 11 // 6炸
	DeckType_deck_bomb7          DeckType = 12 // 7炸
	DeckType_deck_bomb8          DeckType = 13 // 8炸
	DeckType_deck_bomb9          DeckType = 14 // 9炸
	DeckType_deck_bomb10         DeckType = 15 // 10炸
	DeckType_deck_bomb_joker     DeckType = 16 // 王炸
	DeckType_deck_windflow       DeckType = 17 // 接风
)

// Enum value maps for DeckType.
var (
	DeckType_name = map[int32]string{
		0:  "deck_pass",
		1:  "deck_single",
		2:  "deck_pair",
		3:  "deck_three",
		4:  "deck_three_with_two",
		5:  "deck_straight",
		6:  "deck_flush_straight",
		7:  "deck_straight_pair",
		8:  "deck_straight_three",
		9:  "deck_bomb4",
		10: "deck_bomb5",
		11: "deck_bomb6",
		12: "deck_bomb7",
		13: "deck_bomb8",
		14: "deck_bomb9",
		15: "deck_bomb10",
		16: "deck_bomb_joker",
		17: "deck_windflow",
	}
	DeckType_value = map[string]int32{
		"deck_pass":           0,
		"deck_single":         1,
		"deck_pair":           2,
		"deck_three":          3,
		"deck_three_with_two": 4,
		"deck_straight":       5,
		"deck_flush_straight": 6,
		"deck_straight_pair":  7,
		"deck_straight_three": 8,
		"deck_bomb4":          9,
		"deck_bomb5":          10,
		"deck_bomb6":          11,
		"deck_bomb7":          12,
		"deck_bomb8":          13,
		"deck_bomb9":          14,
		"deck_bomb10":         15,
		"deck_bomb_joker":     16,
		"deck_windflow":       17,
	}
)

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}

func (x DeckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[1].Descriptor()
}

func (DeckType) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[1]
}

func (x DeckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckType.Descriptor instead.
func (DeckType) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{1}
}

type ActionType int32

const (
	ActionType_action_unknow     ActionType = 0
	ActionType_action_show_card  ActionType = 20 // 明牌
	ActionType_action_double_bet ActionType = 21 // 加倍
	ActionType_action_out_card   ActionType = 30 // 出牌
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "action_unknow",
		20: "action_show_card",
		21: "action_double_bet",
		30: "action_out_card",
	}
	ActionType_value = map[string]int32{
		"action_unknow":     0,
		"action_show_card":  20,
		"action_double_bet": 21,
		"action_out_card":   30,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{2}
}

type ReqGameInfo_MSGID int32

const (
	ReqGameInfo_unknow ReqGameInfo_MSGID = 0
	ReqGameInfo_ID     ReqGameInfo_MSGID = 3001
)

// Enum value maps for ReqGameInfo_MSGID.
var (
	ReqGameInfo_MSGID_name = map[int32]string{
		0:    "unknow",
		3001: "ID",
	}
	ReqGameInfo_MSGID_value = map[string]int32{
		"unknow": 0,
		"ID":     3001,
	}
)

func (x ReqGameInfo_MSGID) Enum() *ReqGameInfo_MSGID {
	p := new(ReqGameInfo_MSGID)
	*p = x
	return p
}

func (x ReqGameInfo_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqGameInfo_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[3].Descriptor()
}

func (ReqGameInfo_MSGID) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[3]
}

func (x ReqGameInfo_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqGameInfo_MSGID.Descriptor instead.
func (ReqGameInfo_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{4, 0}
}

type RespGameInfo_MSGID int32

const (
	RespGameInfo_unknow RespGameInfo_MSGID = 0
	RespGameInfo_ID     RespGameInfo_MSGID = 3002
)

// Enum value maps for RespGameInfo_MSGID.
var (
	RespGameInfo_MSGID_name = map[int32]string{
		0:    "unknow",
		3002: "ID",
	}
	RespGameInfo_MSGID_value = map[string]int32{
		"unknow": 0,
		"ID":     3002,
	}
)

func (x RespGameInfo_MSGID) Enum() *RespGameInfo_MSGID {
	p := new(RespGameInfo_MSGID)
	*p = x
	return p
}

func (x RespGameInfo_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespGameInfo_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[4].Descriptor()
}

func (RespGameInfo_MSGID) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[4]
}

func (x RespGameInfo_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespGameInfo_MSGID.Descriptor instead.
func (RespGameInfo_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{5, 0}
}

type NotifyGameStage_MSGID int32

const (
	NotifyGameStage_unknow NotifyGameStage_MSGID = 0
	NotifyGameStage_ID     NotifyGameStage_MSGID = 3101
)

// Enum value maps for NotifyGameStage_MSGID.
var (
	NotifyGameStage_MSGID_name = map[int32]string{
		0:    "unknow",
		3101: "ID",
	}
	NotifyGameStage_MSGID_value = map[string]int32{
		"unknow": 0,
		"ID":     3101,
	}
)

func (x NotifyGameStage_MSGID) Enum() *NotifyGameStage_MSGID {
	p := new(NotifyGameStage_MSGID)
	*p = x
	return p
}

func (x NotifyGameStage_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyGameStage_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[5].Descriptor()
}

func (NotifyGameStage_MSGID) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[5]
}

func (x NotifyGameStage_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyGameStage_MSGID.Descriptor instead.
func (NotifyGameStage_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{9, 0}
}

type NotifyPlayerActionPower_MSGID int32

const (
	NotifyPlayerActionPower_unknow NotifyPlayerActionPower_MSGID = 0
	NotifyPlayerActionPower_ID     NotifyPlayerActionPower_MSGID = 3102
)

// Enum value maps for NotifyPlayerActionPower_MSGID.
var (
	NotifyPlayerActionPower_MSGID_name = map[int32]string{
		0:    "unknow",
		3102: "ID",
	}
	NotifyPlayerActionPower_MSGID_value = map[string]int32{
		"unknow": 0,
		"ID":     3102,
	}
)

func (x NotifyPlayerActionPower_MSGID) Enum() *NotifyPlayerActionPower_MSGID {
	p := new(NotifyPlayerActionPower_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerActionPower_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerActionPower_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[6].Descriptor()
}

func (NotifyPlayerActionPower_MSGID) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[6]
}

func (x NotifyPlayerActionPower_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerActionPower_MSGID.Descriptor instead.
func (NotifyPlayerActionPower_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{10, 0}
}

type NotifyPlayerHandCards_MSGID int32

const (
	NotifyPlayerHandCards_unknow NotifyPlayerHandCards_MSGID = 0
	NotifyPlayerHandCards_ID     NotifyPlayerHandCards_MSGID = 3107
)

// Enum value maps for NotifyPlayerHandCards_MSGID.
var (
	NotifyPlayerHandCards_MSGID_name = map[int32]string{
		0:    "unknow",
		3107: "ID",
	}
	NotifyPlayerHandCards_MSGID_value = map[string]int32{
		"unknow": 0,
		"ID":     3107,
	}
)

func (x NotifyPlayerHandCards_MSGID) Enum() *NotifyPlayerHandCards_MSGID {
	p := new(NotifyPlayerHandCards_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerHandCards_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerHandCards_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_game_guandan_guandan_proto_enumTypes[7].Descriptor()
}

func (NotifyPlayerHandCards_MSGID) Type() protoreflect.EnumType {
	return &file_game_guandan_guandan_proto_enumTypes[7]
}

func (x NotifyPlayerHandCards_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerHandCards_MSGID.Descriptor instead.
func (NotifyPlayerHandCards_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{11, 0}
}

type OutCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckType DeckType `protobuf:"varint,2,opt,name=deck_type,json=deckType,proto3,enum=game.guandan.DeckType" json:"deck_type,omitempty"`
	Cards    []byte   `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *OutCardInfo) Reset() {
	*x = OutCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutCardInfo) ProtoMessage() {}

func (x *OutCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutCardInfo.ProtoReflect.Descriptor instead.
func (*OutCardInfo) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{0}
}

func (x *OutCardInfo) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_deck_pass
}

func (x *OutCardInfo) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PlayerGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId      int32        `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	DoubleRate  int32        `protobuf:"varint,6,opt,name=double_rate,json=doubleRate,proto3" json:"double_rate,omitempty"` // 加倍倍率
	HandCards   []byte       `protobuf:"bytes,7,opt,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`     // 手牌
	CurrOutCard *OutCardInfo `protobuf:"bytes,8,opt,name=curr_out_card,json=currOutCard,proto3" json:"curr_out_card,omitempty"`
}

func (x *PlayerGameInfo) Reset() {
	*x = PlayerGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGameInfo) ProtoMessage() {}

func (x *PlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGameInfo.ProtoReflect.Descriptor instead.
func (*PlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerGameInfo) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *PlayerGameInfo) GetDoubleRate() int32 {
	if x != nil {
		return x.DoubleRate
	}
	return 0
}

func (x *PlayerGameInfo) GetHandCards() []byte {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerGameInfo) GetCurrOutCard() *OutCardInfo {
	if x != nil {
		return x.CurrOutCard
	}
	return nil
}

type ActionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=game.guandan.ActionType" json:"action_type,omitempty"`
	// Types that are assignable to Action:
	//
	//	*ActionDetail_DoubleBet
	//	*ActionDetail_OutCards
	Action isActionDetail_Action `protobuf_oneof:"action"`
}

func (x *ActionDetail) Reset() {
	*x = ActionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDetail) ProtoMessage() {}

func (x *ActionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDetail.ProtoReflect.Descriptor instead.
func (*ActionDetail) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{2}
}

func (x *ActionDetail) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_action_unknow
}

func (m *ActionDetail) GetAction() isActionDetail_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionDetail) GetDoubleBet() int32 {
	if x, ok := x.GetAction().(*ActionDetail_DoubleBet); ok {
		return x.DoubleBet
	}
	return 0
}

func (x *ActionDetail) GetOutCards() *OutCardInfo {
	if x, ok := x.GetAction().(*ActionDetail_OutCards); ok {
		return x.OutCards
	}
	return nil
}

type isActionDetail_Action interface {
	isActionDetail_Action()
}

type ActionDetail_DoubleBet struct {
	DoubleBet int32 `protobuf:"varint,2,opt,name=double_bet,json=doubleBet,proto3,oneof"`
}

type ActionDetail_OutCards struct {
	OutCards *OutCardInfo `protobuf:"bytes,3,opt,name=out_cards,json=outCards,proto3,oneof"`
}

func (*ActionDetail_DoubleBet) isActionDetail_Action() {}

func (*ActionDetail_OutCards) isActionDetail_Action() {}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage            StageType                 `protobuf:"varint,1,opt,name=stage,proto3,enum=game.guandan.StageType" json:"stage,omitempty"`
	CurrActionSeatId int32                     `protobuf:"varint,2,opt,name=curr_action_seat_id,json=currActionSeatId,proto3" json:"curr_action_seat_id,omitempty"` // 当前操作玩家
	PlayerInfo       map[int32]*PlayerGameInfo `protobuf:"bytes,5,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{3}
}

func (x *GameInfo) GetStage() StageType {
	if x != nil {
		return x.Stage
	}
	return StageType_StageNone
}

func (x *GameInfo) GetCurrActionSeatId() int32 {
	if x != nil {
		return x.CurrActionSeatId
	}
	return 0
}

func (x *GameInfo) GetPlayerInfo() map[int32]*PlayerGameInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type ReqGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGameInfo) Reset() {
	*x = ReqGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGameInfo) ProtoMessage() {}

func (x *ReqGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGameInfo.ProtoReflect.Descriptor instead.
func (*ReqGameInfo) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{4}
}

type RespGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameInfo *GameInfo `protobuf:"bytes,1,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`
}

func (x *RespGameInfo) Reset() {
	*x = RespGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespGameInfo) ProtoMessage() {}

func (x *RespGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespGameInfo.ProtoReflect.Descriptor instead.
func (*RespGameInfo) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{5}
}

func (x *RespGameInfo) GetGameInfo() *GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

type ReqPlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionDetail *ActionDetail `protobuf:"bytes,1,opt,name=action_detail,json=actionDetail,proto3" json:"action_detail,omitempty"`
}

func (x *ReqPlayerAction) Reset() {
	*x = ReqPlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPlayerAction) ProtoMessage() {}

func (x *ReqPlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPlayerAction.ProtoReflect.Descriptor instead.
func (*ReqPlayerAction) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{6}
}

func (x *ReqPlayerAction) GetActionDetail() *ActionDetail {
	if x != nil {
		return x.ActionDetail
	}
	return nil
}

type RespPlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
}

func (x *RespPlayerAction) Reset() {
	*x = RespPlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespPlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespPlayerAction) ProtoMessage() {}

func (x *RespPlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespPlayerAction.ProtoReflect.Descriptor instead.
func (*RespPlayerAction) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{7}
}

func (x *RespPlayerAction) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RespPlayerAction) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

type NotifyPlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       int32         `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Stage        int32         `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	ActionDetail *ActionDetail `protobuf:"bytes,3,opt,name=action_detail,json=actionDetail,proto3" json:"action_detail,omitempty"`
}

func (x *NotifyPlayerAction) Reset() {
	*x = NotifyPlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerAction) ProtoMessage() {}

func (x *NotifyPlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerAction.ProtoReflect.Descriptor instead.
func (*NotifyPlayerAction) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{8}
}

func (x *NotifyPlayerAction) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerAction) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *NotifyPlayerAction) GetActionDetail() *ActionDetail {
	if x != nil {
		return x.ActionDetail
	}
	return nil
}

type NotifyGameStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastStage StageType `protobuf:"varint,1,opt,name=last_stage,json=lastStage,proto3,enum=game.guandan.StageType" json:"last_stage,omitempty"` // 上一个状态
	CurrStage StageType `protobuf:"varint,2,opt,name=curr_stage,json=currStage,proto3,enum=game.guandan.StageType" json:"curr_stage,omitempty"` // 当前状态
	Deadline  int64     `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`                                                // 截止时间, unix时间戳, 秒
	TimeDown  int32     `protobuf:"varint,4,opt,name=time_down,json=timeDown,proto3" json:"time_down,omitempty"`                                // 参考倒计时,秒, 以截至时间为准
}

func (x *NotifyGameStage) Reset() {
	*x = NotifyGameStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameStage) ProtoMessage() {}

func (x *NotifyGameStage) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameStage.ProtoReflect.Descriptor instead.
func (*NotifyGameStage) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{9}
}

func (x *NotifyGameStage) GetLastStage() StageType {
	if x != nil {
		return x.LastStage
	}
	return StageType_StageNone
}

func (x *NotifyGameStage) GetCurrStage() StageType {
	if x != nil {
		return x.CurrStage
	}
	return StageType_StageNone
}

func (x *NotifyGameStage) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *NotifyGameStage) GetTimeDown() int32 {
	if x != nil {
		return x.TimeDown
	}
	return 0
}

type NotifyPlayerActionPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   int32      `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Action   ActionType `protobuf:"varint,2,opt,name=action,proto3,enum=game.guandan.ActionType" json:"action,omitempty"`
	Deadline int64      `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`                 // 截止时间, unix时间戳, 秒
	TimeDown int32      `protobuf:"varint,4,opt,name=time_down,json=timeDown,proto3" json:"time_down,omitempty"` // 参考倒计时,秒, 以截至时间为准
}

func (x *NotifyPlayerActionPower) Reset() {
	*x = NotifyPlayerActionPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerActionPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerActionPower) ProtoMessage() {}

func (x *NotifyPlayerActionPower) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerActionPower.ProtoReflect.Descriptor instead.
func (*NotifyPlayerActionPower) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{10}
}

func (x *NotifyPlayerActionPower) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerActionPower) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionType_action_unknow
}

func (x *NotifyPlayerActionPower) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *NotifyPlayerActionPower) GetTimeDown() int32 {
	if x != nil {
		return x.TimeDown
	}
	return 0
}

type NotifyPlayerHandCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId int32  `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Cards  []byte `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *NotifyPlayerHandCards) Reset() {
	*x = NotifyPlayerHandCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_guandan_guandan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerHandCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerHandCards) ProtoMessage() {}

func (x *NotifyPlayerHandCards) ProtoReflect() protoreflect.Message {
	mi := &file_game_guandan_guandan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerHandCards.ProtoReflect.Descriptor instead.
func (*NotifyPlayerHandCards) Descriptor() ([]byte, []int) {
	return file_game_guandan_guandan_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyPlayerHandCards) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerHandCards) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

var File_game_guandan_guandan_proto protoreflect.FileDescriptor

var file_game_guandan_guandan_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2f, 0x67,
	0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x22, 0x58, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67,
	0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22,
	0xae, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61,
	0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f,
	0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8e, 0x02, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5b, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2b, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x1c, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xb9, 0x17, 0x22, 0x61,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0a, 0x0a, 0x06,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xba,
	0x17, 0x22, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd8, 0x01, 0x0a,
	0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e,
	0x64, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x1c, 0x0a, 0x05, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x02, 0x49, 0x44, 0x10, 0x9d, 0x18, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x1c, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44,
	0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02,
	0x49, 0x44, 0x10, 0x9e, 0x18, 0x22, 0x64, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x1c, 0x0a,
	0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xa3, 0x18, 0x2a, 0x91, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10,
	0x10, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x29, 0x2a,
	0xd8, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74,
	0x77, 0x6f, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x34, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x35, 0x10,
	0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x36, 0x10,
	0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x37, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x38, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x39, 0x10,
	0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x31, 0x30,
	0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x5f,
	0x6a, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x11, 0x2a, 0x61, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x10,
	0x14, 0x12, 0x15, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x10, 0x1e, 0x42, 0x18, 0x5a,
	0x16, 0x2e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x3b,
	0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_guandan_guandan_proto_rawDescOnce sync.Once
	file_game_guandan_guandan_proto_rawDescData = file_game_guandan_guandan_proto_rawDesc
)

func file_game_guandan_guandan_proto_rawDescGZIP() []byte {
	file_game_guandan_guandan_proto_rawDescOnce.Do(func() {
		file_game_guandan_guandan_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_guandan_guandan_proto_rawDescData)
	})
	return file_game_guandan_guandan_proto_rawDescData
}

var file_game_guandan_guandan_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_game_guandan_guandan_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_game_guandan_guandan_proto_goTypes = []any{
	(StageType)(0),                     // 0: game.guandan.StageType
	(DeckType)(0),                      // 1: game.guandan.DeckType
	(ActionType)(0),                    // 2: game.guandan.ActionType
	(ReqGameInfo_MSGID)(0),             // 3: game.guandan.ReqGameInfo.MSGID
	(RespGameInfo_MSGID)(0),            // 4: game.guandan.RespGameInfo.MSGID
	(NotifyGameStage_MSGID)(0),         // 5: game.guandan.NotifyGameStage.MSGID
	(NotifyPlayerActionPower_MSGID)(0), // 6: game.guandan.NotifyPlayerActionPower.MSGID
	(NotifyPlayerHandCards_MSGID)(0),   // 7: game.guandan.NotifyPlayerHandCards.MSGID
	(*OutCardInfo)(nil),                // 8: game.guandan.OutCardInfo
	(*PlayerGameInfo)(nil),             // 9: game.guandan.PlayerGameInfo
	(*ActionDetail)(nil),               // 10: game.guandan.ActionDetail
	(*GameInfo)(nil),                   // 11: game.guandan.GameInfo
	(*ReqGameInfo)(nil),                // 12: game.guandan.ReqGameInfo
	(*RespGameInfo)(nil),               // 13: game.guandan.RespGameInfo
	(*ReqPlayerAction)(nil),            // 14: game.guandan.ReqPlayerAction
	(*RespPlayerAction)(nil),           // 15: game.guandan.RespPlayerAction
	(*NotifyPlayerAction)(nil),         // 16: game.guandan.NotifyPlayerAction
	(*NotifyGameStage)(nil),            // 17: game.guandan.NotifyGameStage
	(*NotifyPlayerActionPower)(nil),    // 18: game.guandan.NotifyPlayerActionPower
	(*NotifyPlayerHandCards)(nil),      // 19: game.guandan.NotifyPlayerHandCards
	nil,                                // 20: game.guandan.GameInfo.PlayerInfoEntry
}
var file_game_guandan_guandan_proto_depIdxs = []int32{
	1,  // 0: game.guandan.OutCardInfo.deck_type:type_name -> game.guandan.DeckType
	8,  // 1: game.guandan.PlayerGameInfo.curr_out_card:type_name -> game.guandan.OutCardInfo
	2,  // 2: game.guandan.ActionDetail.action_type:type_name -> game.guandan.ActionType
	8,  // 3: game.guandan.ActionDetail.out_cards:type_name -> game.guandan.OutCardInfo
	0,  // 4: game.guandan.GameInfo.stage:type_name -> game.guandan.StageType
	20, // 5: game.guandan.GameInfo.player_info:type_name -> game.guandan.GameInfo.PlayerInfoEntry
	11, // 6: game.guandan.RespGameInfo.game_info:type_name -> game.guandan.GameInfo
	10, // 7: game.guandan.ReqPlayerAction.action_detail:type_name -> game.guandan.ActionDetail
	10, // 8: game.guandan.NotifyPlayerAction.action_detail:type_name -> game.guandan.ActionDetail
	0,  // 9: game.guandan.NotifyGameStage.last_stage:type_name -> game.guandan.StageType
	0,  // 10: game.guandan.NotifyGameStage.curr_stage:type_name -> game.guandan.StageType
	2,  // 11: game.guandan.NotifyPlayerActionPower.action:type_name -> game.guandan.ActionType
	9,  // 12: game.guandan.GameInfo.PlayerInfoEntry.value:type_name -> game.guandan.PlayerGameInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_game_guandan_guandan_proto_init() }
func file_game_guandan_guandan_proto_init() {
	if File_game_guandan_guandan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_guandan_guandan_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OutCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ActionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ReqGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RespGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReqPlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RespPlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyGameStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerActionPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_guandan_guandan_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerHandCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_game_guandan_guandan_proto_msgTypes[2].OneofWrappers = []any{
		(*ActionDetail_DoubleBet)(nil),
		(*ActionDetail_OutCards)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_guandan_guandan_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_guandan_guandan_proto_goTypes,
		DependencyIndexes: file_game_guandan_guandan_proto_depIdxs,
		EnumInfos:         file_game_guandan_guandan_proto_enumTypes,
		MessageInfos:      file_game_guandan_guandan_proto_msgTypes,
	}.Build()
	File_game_guandan_guandan_proto = out.File
	file_game_guandan_guandan_proto_rawDesc = nil
	file_game_guandan_guandan_proto_goTypes = nil
	file_game_guandan_guandan_proto_depIdxs = nil
}
