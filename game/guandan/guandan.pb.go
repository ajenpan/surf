// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.23.4
// source: guandan.proto

package guandan

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageType int32

const (
	StageType_Stage_None         StageType = 0  // 无效
	StageType_Stage_GameStart    StageType = 12 // 开局
	StageType_Stage_DoubleBet    StageType = 16 // 加倍
	StageType_Stage_DealingCards StageType = 20 // 发牌
	StageType_Stage_Gaming       StageType = 30 // 对局
	StageType_Stage_Tally        StageType = 40 // 小结算
	StageType_Stage_FinalResult  StageType = 41 // 大结算
)

// Enum value maps for StageType.
var (
	StageType_name = map[int32]string{
		0:  "Stage_None",
		12: "Stage_GameStart",
		16: "Stage_DoubleBet",
		20: "Stage_DealingCards",
		30: "Stage_Gaming",
		40: "Stage_Tally",
		41: "Stage_FinalResult",
	}
	StageType_value = map[string]int32{
		"Stage_None":         0,
		"Stage_GameStart":    12,
		"Stage_DoubleBet":    16,
		"Stage_DealingCards": 20,
		"Stage_Gaming":       30,
		"Stage_Tally":        40,
		"Stage_FinalResult":  41,
	}
)

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}

func (x StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[0].Descriptor()
}

func (StageType) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[0]
}

func (x StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageType.Descriptor instead.
func (StageType) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{0}
}

type DeckType int32

const (
	DeckType_Deck_Pass          DeckType = 0  // 过
	DeckType_Deck_Single        DeckType = 1  // 单张
	DeckType_Deck_Pair          DeckType = 2  // 对子
	DeckType_Deck_Three         DeckType = 3  // 3张
	DeckType_Deck_ThreeWithTwo  DeckType = 4  // 3带2
	DeckType_Deck_Straight      DeckType = 5  // 顺子
	DeckType_Deck_StraightFlush DeckType = 6  // 同花顺
	DeckType_Deck_StraightPair  DeckType = 7  // 连对
	DeckType_Deck_StraightThree DeckType = 8  // 钢板 （2 个连续的三张牌）
	DeckType_Deck_Bomb4         DeckType = 9  // 4炸
	DeckType_Deck_Bomb5         DeckType = 10 // 5炸
	DeckType_Deck_Bomb6         DeckType = 11 // 6炸
	DeckType_Deck_Bomb7         DeckType = 12 // 7炸
	DeckType_Deck_Bomb8         DeckType = 13 // 8炸
	DeckType_Deck_Bomb9         DeckType = 14 // 9炸
	DeckType_Deck_Bomb10        DeckType = 15 // 10炸
	DeckType_Deck_BombJoker     DeckType = 16 // 王炸
	DeckType_Deck_Windflow      DeckType = 17 // 接风
)

// Enum value maps for DeckType.
var (
	DeckType_name = map[int32]string{
		0:  "Deck_Pass",
		1:  "Deck_Single",
		2:  "Deck_Pair",
		3:  "Deck_Three",
		4:  "Deck_ThreeWithTwo",
		5:  "Deck_Straight",
		6:  "Deck_StraightFlush",
		7:  "Deck_StraightPair",
		8:  "Deck_StraightThree",
		9:  "Deck_Bomb4",
		10: "Deck_Bomb5",
		11: "Deck_Bomb6",
		12: "Deck_Bomb7",
		13: "Deck_Bomb8",
		14: "Deck_Bomb9",
		15: "Deck_Bomb10",
		16: "Deck_BombJoker",
		17: "Deck_Windflow",
	}
	DeckType_value = map[string]int32{
		"Deck_Pass":          0,
		"Deck_Single":        1,
		"Deck_Pair":          2,
		"Deck_Three":         3,
		"Deck_ThreeWithTwo":  4,
		"Deck_Straight":      5,
		"Deck_StraightFlush": 6,
		"Deck_StraightPair":  7,
		"Deck_StraightThree": 8,
		"Deck_Bomb4":         9,
		"Deck_Bomb5":         10,
		"Deck_Bomb6":         11,
		"Deck_Bomb7":         12,
		"Deck_Bomb8":         13,
		"Deck_Bomb9":         14,
		"Deck_Bomb10":        15,
		"Deck_BombJoker":     16,
		"Deck_Windflow":      17,
	}
)

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}

func (x DeckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckType) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[1].Descriptor()
}

func (DeckType) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[1]
}

func (x DeckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckType.Descriptor instead.
func (DeckType) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{1}
}

type ReqGameInfo_MSGID int32

const (
	ReqGameInfo__INVALID_ ReqGameInfo_MSGID = 0
	ReqGameInfo_ID        ReqGameInfo_MSGID = 3001
)

// Enum value maps for ReqGameInfo_MSGID.
var (
	ReqGameInfo_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3001: "ID",
	}
	ReqGameInfo_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3001,
	}
)

func (x ReqGameInfo_MSGID) Enum() *ReqGameInfo_MSGID {
	p := new(ReqGameInfo_MSGID)
	*p = x
	return p
}

func (x ReqGameInfo_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqGameInfo_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[2].Descriptor()
}

func (ReqGameInfo_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[2]
}

func (x ReqGameInfo_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqGameInfo_MSGID.Descriptor instead.
func (ReqGameInfo_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{4, 0}
}

type RespGameInfo_MSGID int32

const (
	RespGameInfo__INVALID_ RespGameInfo_MSGID = 0
	RespGameInfo_ID        RespGameInfo_MSGID = 3002
)

// Enum value maps for RespGameInfo_MSGID.
var (
	RespGameInfo_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3002: "ID",
	}
	RespGameInfo_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3002,
	}
)

func (x RespGameInfo_MSGID) Enum() *RespGameInfo_MSGID {
	p := new(RespGameInfo_MSGID)
	*p = x
	return p
}

func (x RespGameInfo_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespGameInfo_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[3].Descriptor()
}

func (RespGameInfo_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[3]
}

func (x RespGameInfo_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespGameInfo_MSGID.Descriptor instead.
func (RespGameInfo_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{5, 0}
}

type ReqPlayerOutCards_MSGID int32

const (
	ReqPlayerOutCards__INVALID_ ReqPlayerOutCards_MSGID = 0
	ReqPlayerOutCards_ID        ReqPlayerOutCards_MSGID = 3005
)

// Enum value maps for ReqPlayerOutCards_MSGID.
var (
	ReqPlayerOutCards_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3005: "ID",
	}
	ReqPlayerOutCards_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3005,
	}
)

func (x ReqPlayerOutCards_MSGID) Enum() *ReqPlayerOutCards_MSGID {
	p := new(ReqPlayerOutCards_MSGID)
	*p = x
	return p
}

func (x ReqPlayerOutCards_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqPlayerOutCards_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[4].Descriptor()
}

func (ReqPlayerOutCards_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[4]
}

func (x ReqPlayerOutCards_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqPlayerOutCards_MSGID.Descriptor instead.
func (ReqPlayerOutCards_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{6, 0}
}

type RespPlayerOutCards_MSGID int32

const (
	RespPlayerOutCards__INVALID_ RespPlayerOutCards_MSGID = 0
	RespPlayerOutCards_ID        RespPlayerOutCards_MSGID = 3006
)

// Enum value maps for RespPlayerOutCards_MSGID.
var (
	RespPlayerOutCards_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3006: "ID",
	}
	RespPlayerOutCards_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3006,
	}
)

func (x RespPlayerOutCards_MSGID) Enum() *RespPlayerOutCards_MSGID {
	p := new(RespPlayerOutCards_MSGID)
	*p = x
	return p
}

func (x RespPlayerOutCards_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespPlayerOutCards_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[5].Descriptor()
}

func (RespPlayerOutCards_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[5]
}

func (x RespPlayerOutCards_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespPlayerOutCards_MSGID.Descriptor instead.
func (RespPlayerOutCards_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{7, 0}
}

type NotifyPlayerOutCards_MSGID int32

const (
	NotifyPlayerOutCards__INVALID_ NotifyPlayerOutCards_MSGID = 0
	NotifyPlayerOutCards_ID        NotifyPlayerOutCards_MSGID = 3106
)

// Enum value maps for NotifyPlayerOutCards_MSGID.
var (
	NotifyPlayerOutCards_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3106: "ID",
	}
	NotifyPlayerOutCards_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3106,
	}
)

func (x NotifyPlayerOutCards_MSGID) Enum() *NotifyPlayerOutCards_MSGID {
	p := new(NotifyPlayerOutCards_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerOutCards_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerOutCards_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[6].Descriptor()
}

func (NotifyPlayerOutCards_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[6]
}

func (x NotifyPlayerOutCards_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerOutCards_MSGID.Descriptor instead.
func (NotifyPlayerOutCards_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{8, 0}
}

type ReqPlayerDoubleBet_MSGID int32

const (
	ReqPlayerDoubleBet__INVALID_ ReqPlayerDoubleBet_MSGID = 0
	ReqPlayerDoubleBet_ID        ReqPlayerDoubleBet_MSGID = 3007
)

// Enum value maps for ReqPlayerDoubleBet_MSGID.
var (
	ReqPlayerDoubleBet_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3007: "ID",
	}
	ReqPlayerDoubleBet_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3007,
	}
)

func (x ReqPlayerDoubleBet_MSGID) Enum() *ReqPlayerDoubleBet_MSGID {
	p := new(ReqPlayerDoubleBet_MSGID)
	*p = x
	return p
}

func (x ReqPlayerDoubleBet_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqPlayerDoubleBet_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[7].Descriptor()
}

func (ReqPlayerDoubleBet_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[7]
}

func (x ReqPlayerDoubleBet_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqPlayerDoubleBet_MSGID.Descriptor instead.
func (ReqPlayerDoubleBet_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{9, 0}
}

type RespPlayerDoubleBet_MSGID int32

const (
	RespPlayerDoubleBet__INVALID_ RespPlayerDoubleBet_MSGID = 0
	RespPlayerDoubleBet_ID        RespPlayerDoubleBet_MSGID = 3008
)

// Enum value maps for RespPlayerDoubleBet_MSGID.
var (
	RespPlayerDoubleBet_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3008: "ID",
	}
	RespPlayerDoubleBet_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3008,
	}
)

func (x RespPlayerDoubleBet_MSGID) Enum() *RespPlayerDoubleBet_MSGID {
	p := new(RespPlayerDoubleBet_MSGID)
	*p = x
	return p
}

func (x RespPlayerDoubleBet_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RespPlayerDoubleBet_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[8].Descriptor()
}

func (RespPlayerDoubleBet_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[8]
}

func (x RespPlayerDoubleBet_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RespPlayerDoubleBet_MSGID.Descriptor instead.
func (RespPlayerDoubleBet_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{10, 0}
}

type NotifyPlayerDoubleBet_MSGID int32

const (
	NotifyPlayerDoubleBet__INVALID_ NotifyPlayerDoubleBet_MSGID = 0
	NotifyPlayerDoubleBet_ID        NotifyPlayerDoubleBet_MSGID = 3105
)

// Enum value maps for NotifyPlayerDoubleBet_MSGID.
var (
	NotifyPlayerDoubleBet_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3105: "ID",
	}
	NotifyPlayerDoubleBet_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3105,
	}
)

func (x NotifyPlayerDoubleBet_MSGID) Enum() *NotifyPlayerDoubleBet_MSGID {
	p := new(NotifyPlayerDoubleBet_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerDoubleBet_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerDoubleBet_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[9].Descriptor()
}

func (NotifyPlayerDoubleBet_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[9]
}

func (x NotifyPlayerDoubleBet_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerDoubleBet_MSGID.Descriptor instead.
func (NotifyPlayerDoubleBet_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{11, 0}
}

type NotifyGameStage_MSGID int32

const (
	NotifyGameStage__INVALID_ NotifyGameStage_MSGID = 0
	NotifyGameStage_ID        NotifyGameStage_MSGID = 3101
)

// Enum value maps for NotifyGameStage_MSGID.
var (
	NotifyGameStage_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3101: "ID",
	}
	NotifyGameStage_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3101,
	}
)

func (x NotifyGameStage_MSGID) Enum() *NotifyGameStage_MSGID {
	p := new(NotifyGameStage_MSGID)
	*p = x
	return p
}

func (x NotifyGameStage_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyGameStage_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[10].Descriptor()
}

func (NotifyGameStage_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[10]
}

func (x NotifyGameStage_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyGameStage_MSGID.Descriptor instead.
func (NotifyGameStage_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{12, 0}
}

type NotifyPlayerHandCards_MSGID int32

const (
	NotifyPlayerHandCards__INVALID_ NotifyPlayerHandCards_MSGID = 0
	NotifyPlayerHandCards_ID        NotifyPlayerHandCards_MSGID = 3107
)

// Enum value maps for NotifyPlayerHandCards_MSGID.
var (
	NotifyPlayerHandCards_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3107: "ID",
	}
	NotifyPlayerHandCards_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3107,
	}
)

func (x NotifyPlayerHandCards_MSGID) Enum() *NotifyPlayerHandCards_MSGID {
	p := new(NotifyPlayerHandCards_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerHandCards_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerHandCards_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[11].Descriptor()
}

func (NotifyPlayerHandCards_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[11]
}

func (x NotifyPlayerHandCards_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerHandCards_MSGID.Descriptor instead.
func (NotifyPlayerHandCards_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{13, 0}
}

type NotifyPlayerDoubleBetPower_MSGID int32

const (
	NotifyPlayerDoubleBetPower__INVALID_ NotifyPlayerDoubleBetPower_MSGID = 0
	NotifyPlayerDoubleBetPower_ID        NotifyPlayerDoubleBetPower_MSGID = 3108
)

// Enum value maps for NotifyPlayerDoubleBetPower_MSGID.
var (
	NotifyPlayerDoubleBetPower_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3108: "ID",
	}
	NotifyPlayerDoubleBetPower_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3108,
	}
)

func (x NotifyPlayerDoubleBetPower_MSGID) Enum() *NotifyPlayerDoubleBetPower_MSGID {
	p := new(NotifyPlayerDoubleBetPower_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerDoubleBetPower_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerDoubleBetPower_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[12].Descriptor()
}

func (NotifyPlayerDoubleBetPower_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[12]
}

func (x NotifyPlayerDoubleBetPower_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerDoubleBetPower_MSGID.Descriptor instead.
func (NotifyPlayerDoubleBetPower_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{15, 0}
}

type OutCardConf_OutCardPowerType int32

const (
	OutCardConf_Normal   OutCardConf_OutCardPowerType = 0
	OutCardConf_Windflow OutCardConf_OutCardPowerType = 1
	OutCardConf_FirstOut OutCardConf_OutCardPowerType = 2
)

// Enum value maps for OutCardConf_OutCardPowerType.
var (
	OutCardConf_OutCardPowerType_name = map[int32]string{
		0: "Normal",
		1: "Windflow",
		2: "FirstOut",
	}
	OutCardConf_OutCardPowerType_value = map[string]int32{
		"Normal":   0,
		"Windflow": 1,
		"FirstOut": 2,
	}
)

func (x OutCardConf_OutCardPowerType) Enum() *OutCardConf_OutCardPowerType {
	p := new(OutCardConf_OutCardPowerType)
	*p = x
	return p
}

func (x OutCardConf_OutCardPowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutCardConf_OutCardPowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[13].Descriptor()
}

func (OutCardConf_OutCardPowerType) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[13]
}

func (x OutCardConf_OutCardPowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutCardConf_OutCardPowerType.Descriptor instead.
func (OutCardConf_OutCardPowerType) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{16, 0}
}

type NotifyPlayerOutCardPower_MSGID int32

const (
	NotifyPlayerOutCardPower__INVALID_ NotifyPlayerOutCardPower_MSGID = 0
	NotifyPlayerOutCardPower_ID        NotifyPlayerOutCardPower_MSGID = 3109
)

// Enum value maps for NotifyPlayerOutCardPower_MSGID.
var (
	NotifyPlayerOutCardPower_MSGID_name = map[int32]string{
		0:    "_INVALID_",
		3109: "ID",
	}
	NotifyPlayerOutCardPower_MSGID_value = map[string]int32{
		"_INVALID_": 0,
		"ID":        3109,
	}
)

func (x NotifyPlayerOutCardPower_MSGID) Enum() *NotifyPlayerOutCardPower_MSGID {
	p := new(NotifyPlayerOutCardPower_MSGID)
	*p = x
	return p
}

func (x NotifyPlayerOutCardPower_MSGID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyPlayerOutCardPower_MSGID) Descriptor() protoreflect.EnumDescriptor {
	return file_guandan_proto_enumTypes[14].Descriptor()
}

func (NotifyPlayerOutCardPower_MSGID) Type() protoreflect.EnumType {
	return &file_guandan_proto_enumTypes[14]
}

func (x NotifyPlayerOutCardPower_MSGID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyPlayerOutCardPower_MSGID.Descriptor instead.
func (NotifyPlayerOutCardPower_MSGID) EnumDescriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{17, 0}
}

// 出牌信息
type OutCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckType  DeckType `protobuf:"varint,1,opt,name=deck_type,json=deckType,proto3,enum=game.guandan.DeckType" json:"deck_type,omitempty"`
	DeckValue int32    `protobuf:"varint,2,opt,name=deck_value,json=deckValue,proto3" json:"deck_value,omitempty"` // 牌值, 用于比较相同类型牌的大小. 如:同样是4炸, deck_value 为 4 表示4张4, 为 5 表示4张5, 显然5大于4
	Cards     []byte   `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *OutCardInfo) Reset() {
	*x = OutCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutCardInfo) ProtoMessage() {}

func (x *OutCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutCardInfo.ProtoReflect.Descriptor instead.
func (*OutCardInfo) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{0}
}

func (x *OutCardInfo) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_Deck_Pass
}

func (x *OutCardInfo) GetDeckValue() int32 {
	if x != nil {
		return x.DeckValue
	}
	return 0
}

func (x *OutCardInfo) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PlayerGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SeatId      int32        `protobuf:"varint,2,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Score       int64        `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	DoubleBet   int32        `protobuf:"varint,6,opt,name=double_bet,json=doubleBet,proto3" json:"double_bet,omitempty"` // 加倍倍率
	HandCards   []byte       `protobuf:"bytes,7,opt,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`  // 手牌
	CurrOutCard *OutCardInfo `protobuf:"bytes,8,opt,name=curr_out_card,json=currOutCard,proto3" json:"curr_out_card,omitempty"`
}

func (x *PlayerGameInfo) Reset() {
	*x = PlayerGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGameInfo) ProtoMessage() {}

func (x *PlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGameInfo.ProtoReflect.Descriptor instead.
func (*PlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerGameInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerGameInfo) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *PlayerGameInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerGameInfo) GetDoubleBet() int32 {
	if x != nil {
		return x.DoubleBet
	}
	return 0
}

func (x *PlayerGameInfo) GetHandCards() []byte {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerGameInfo) GetCurrOutCard() *OutCardInfo {
	if x != nil {
		return x.CurrOutCard
	}
	return nil
}

type GameConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wildcard int32 `protobuf:"varint,1,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
}

func (x *GameConf) Reset() {
	*x = GameConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConf) ProtoMessage() {}

func (x *GameConf) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConf.ProtoReflect.Descriptor instead.
func (*GameConf) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{2}
}

func (x *GameConf) GetWildcard() int32 {
	if x != nil {
		return x.Wildcard
	}
	return 0
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage                 StageType                 `protobuf:"varint,1,opt,name=stage,proto3,enum=game.guandan.StageType" json:"stage,omitempty"`
	SubStage              int32                     `protobuf:"varint,2,opt,name=sub_stage,json=subStage,proto3" json:"sub_stage,omitempty"`
	Conf                  *GameConf                 `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	PlayerInfo            map[int32]*PlayerGameInfo `protobuf:"bytes,5,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrActionPowerSeatid int32                     `protobuf:"varint,16,opt,name=curr_action_power_seatid,json=currActionPowerSeatid,proto3" json:"curr_action_power_seatid,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{3}
}

func (x *GameInfo) GetStage() StageType {
	if x != nil {
		return x.Stage
	}
	return StageType_Stage_None
}

func (x *GameInfo) GetSubStage() int32 {
	if x != nil {
		return x.SubStage
	}
	return 0
}

func (x *GameInfo) GetConf() *GameConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *GameInfo) GetPlayerInfo() map[int32]*PlayerGameInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *GameInfo) GetCurrActionPowerSeatid() int32 {
	if x != nil {
		return x.CurrActionPowerSeatid
	}
	return 0
}

type ReqGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGameInfo) Reset() {
	*x = ReqGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGameInfo) ProtoMessage() {}

func (x *ReqGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGameInfo.ProtoReflect.Descriptor instead.
func (*ReqGameInfo) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{4}
}

type RespGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameInfo *GameInfo `protobuf:"bytes,1,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`
}

func (x *RespGameInfo) Reset() {
	*x = RespGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespGameInfo) ProtoMessage() {}

func (x *RespGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespGameInfo.ProtoReflect.Descriptor instead.
func (*RespGameInfo) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{5}
}

func (x *RespGameInfo) GetGameInfo() *GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

type ReqPlayerOutCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutCards *OutCardInfo `protobuf:"bytes,1,opt,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"`
}

func (x *ReqPlayerOutCards) Reset() {
	*x = ReqPlayerOutCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPlayerOutCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPlayerOutCards) ProtoMessage() {}

func (x *ReqPlayerOutCards) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPlayerOutCards.ProtoReflect.Descriptor instead.
func (*ReqPlayerOutCards) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{6}
}

func (x *ReqPlayerOutCards) GetOutCards() *OutCardInfo {
	if x != nil {
		return x.OutCards
	}
	return nil
}

type RespPlayerOutCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag      int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Errmsg    string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	HandCards []byte `protobuf:"bytes,3,opt,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` // 出牌后剩下的手牌
}

func (x *RespPlayerOutCards) Reset() {
	*x = RespPlayerOutCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespPlayerOutCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespPlayerOutCards) ProtoMessage() {}

func (x *RespPlayerOutCards) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespPlayerOutCards.ProtoReflect.Descriptor instead.
func (*RespPlayerOutCards) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{7}
}

func (x *RespPlayerOutCards) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RespPlayerOutCards) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *RespPlayerOutCards) GetHandCards() []byte {
	if x != nil {
		return x.HandCards
	}
	return nil
}

type NotifyPlayerOutCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   int32        `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	OutCards *OutCardInfo `protobuf:"bytes,2,opt,name=out_cards,json=outCards,proto3" json:"out_cards,omitempty"`
}

func (x *NotifyPlayerOutCards) Reset() {
	*x = NotifyPlayerOutCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerOutCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerOutCards) ProtoMessage() {}

func (x *NotifyPlayerOutCards) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerOutCards.ProtoReflect.Descriptor instead.
func (*NotifyPlayerOutCards) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{8}
}

func (x *NotifyPlayerOutCards) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerOutCards) GetOutCards() *OutCardInfo {
	if x != nil {
		return x.OutCards
	}
	return nil
}

type ReqPlayerDoubleBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleBet int32 `protobuf:"varint,1,opt,name=double_bet,json=doubleBet,proto3" json:"double_bet,omitempty"`
}

func (x *ReqPlayerDoubleBet) Reset() {
	*x = ReqPlayerDoubleBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPlayerDoubleBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPlayerDoubleBet) ProtoMessage() {}

func (x *ReqPlayerDoubleBet) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPlayerDoubleBet.ProtoReflect.Descriptor instead.
func (*ReqPlayerDoubleBet) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{9}
}

func (x *ReqPlayerDoubleBet) GetDoubleBet() int32 {
	if x != nil {
		return x.DoubleBet
	}
	return 0
}

type RespPlayerDoubleBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
}

func (x *RespPlayerDoubleBet) Reset() {
	*x = RespPlayerDoubleBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespPlayerDoubleBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespPlayerDoubleBet) ProtoMessage() {}

func (x *RespPlayerDoubleBet) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespPlayerDoubleBet.ProtoReflect.Descriptor instead.
func (*RespPlayerDoubleBet) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{10}
}

func (x *RespPlayerDoubleBet) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RespPlayerDoubleBet) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

type NotifyPlayerDoubleBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId    int32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	DoubleBet int32 `protobuf:"varint,2,opt,name=double_bet,json=doubleBet,proto3" json:"double_bet,omitempty"`
}

func (x *NotifyPlayerDoubleBet) Reset() {
	*x = NotifyPlayerDoubleBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerDoubleBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerDoubleBet) ProtoMessage() {}

func (x *NotifyPlayerDoubleBet) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerDoubleBet.ProtoReflect.Descriptor instead.
func (*NotifyPlayerDoubleBet) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyPlayerDoubleBet) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerDoubleBet) GetDoubleBet() int32 {
	if x != nil {
		return x.DoubleBet
	}
	return 0
}

type NotifyGameStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastStage    StageType `protobuf:"varint,1,opt,name=last_stage,json=lastStage,proto3,enum=game.guandan.StageType" json:"last_stage,omitempty"` // 上一个状态
	CurrStage    StageType `protobuf:"varint,2,opt,name=curr_stage,json=currStage,proto3,enum=game.guandan.StageType" json:"curr_stage,omitempty"` // 当前状态
	CurrSubStage int32     `protobuf:"varint,3,opt,name=curr_sub_stage,json=currSubStage,proto3" json:"curr_sub_stage,omitempty"`
	Deadline     int64     `protobuf:"varint,13,opt,name=deadline,proto3" json:"deadline,omitempty"` // 截止时间, unix时间戳, 秒
	Downtime     int32     `protobuf:"varint,14,opt,name=downtime,proto3" json:"downtime,omitempty"` // 参考倒计时,秒, 以截至时间为准
}

func (x *NotifyGameStage) Reset() {
	*x = NotifyGameStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameStage) ProtoMessage() {}

func (x *NotifyGameStage) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameStage.ProtoReflect.Descriptor instead.
func (*NotifyGameStage) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyGameStage) GetLastStage() StageType {
	if x != nil {
		return x.LastStage
	}
	return StageType_Stage_None
}

func (x *NotifyGameStage) GetCurrStage() StageType {
	if x != nil {
		return x.CurrStage
	}
	return StageType_Stage_None
}

func (x *NotifyGameStage) GetCurrSubStage() int32 {
	if x != nil {
		return x.CurrSubStage
	}
	return 0
}

func (x *NotifyGameStage) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *NotifyGameStage) GetDowntime() int32 {
	if x != nil {
		return x.Downtime
	}
	return 0
}

type NotifyPlayerHandCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId int32  `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Cards  []byte `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *NotifyPlayerHandCards) Reset() {
	*x = NotifyPlayerHandCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerHandCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerHandCards) ProtoMessage() {}

func (x *NotifyPlayerHandCards) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerHandCards.ProtoReflect.Descriptor instead.
func (*NotifyPlayerHandCards) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{13}
}

func (x *NotifyPlayerHandCards) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerHandCards) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type DoubleBetConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuperDouble bool `protobuf:"varint,1,opt,name=super_double,json=superDouble,proto3" json:"super_double,omitempty"` // 是否可以超级加倍
}

func (x *DoubleBetConf) Reset() {
	*x = DoubleBetConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleBetConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleBetConf) ProtoMessage() {}

func (x *DoubleBetConf) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleBetConf.ProtoReflect.Descriptor instead.
func (*DoubleBetConf) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{14}
}

func (x *DoubleBetConf) GetSuperDouble() bool {
	if x != nil {
		return x.SuperDouble
	}
	return false
}

type NotifyPlayerDoubleBetPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   int32          `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Conf     *DoubleBetConf `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	Deadline int64          `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"` // 截止时间, unix时间戳, 秒
	Downtime int32          `protobuf:"varint,4,opt,name=downtime,proto3" json:"downtime,omitempty"` // 参考倒计时,秒, 以截至时间为准
}

func (x *NotifyPlayerDoubleBetPower) Reset() {
	*x = NotifyPlayerDoubleBetPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerDoubleBetPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerDoubleBetPower) ProtoMessage() {}

func (x *NotifyPlayerDoubleBetPower) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerDoubleBetPower.ProtoReflect.Descriptor instead.
func (*NotifyPlayerDoubleBetPower) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{15}
}

func (x *NotifyPlayerDoubleBetPower) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerDoubleBetPower) GetConf() *DoubleBetConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *NotifyPlayerDoubleBetPower) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *NotifyPlayerDoubleBetPower) GetDowntime() int32 {
	if x != nil {
		return x.Downtime
	}
	return 0
}

type OutCardConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnablePass bool                         `protobuf:"varint,1,opt,name=enable_pass,json=enablePass,proto3" json:"enable_pass,omitempty"`                                             // 是否可以 `不出` (pass)
	PowerType  OutCardConf_OutCardPowerType `protobuf:"varint,2,opt,name=power_type,json=powerType,proto3,enum=game.guandan.OutCardConf_OutCardPowerType" json:"power_type,omitempty"` // 出牌权力类型
}

func (x *OutCardConf) Reset() {
	*x = OutCardConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutCardConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutCardConf) ProtoMessage() {}

func (x *OutCardConf) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutCardConf.ProtoReflect.Descriptor instead.
func (*OutCardConf) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{16}
}

func (x *OutCardConf) GetEnablePass() bool {
	if x != nil {
		return x.EnablePass
	}
	return false
}

func (x *OutCardConf) GetPowerType() OutCardConf_OutCardPowerType {
	if x != nil {
		return x.PowerType
	}
	return OutCardConf_Normal
}

type NotifyPlayerOutCardPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   int32        `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Conf     *OutCardConf `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	Deadline int64        `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"` // 截止时间, unix时间戳, 秒
	Downtime int32        `protobuf:"varint,4,opt,name=downtime,proto3" json:"downtime,omitempty"` // 参考倒计时,秒, 以截至时间为准
}

func (x *NotifyPlayerOutCardPower) Reset() {
	*x = NotifyPlayerOutCardPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guandan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPlayerOutCardPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPlayerOutCardPower) ProtoMessage() {}

func (x *NotifyPlayerOutCardPower) ProtoReflect() protoreflect.Message {
	mi := &file_guandan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPlayerOutCardPower.ProtoReflect.Descriptor instead.
func (*NotifyPlayerOutCardPower) Descriptor() ([]byte, []int) {
	return file_guandan_proto_rawDescGZIP(), []int{17}
}

func (x *NotifyPlayerOutCardPower) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *NotifyPlayerOutCardPower) GetConf() *OutCardConf {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *NotifyPlayerOutCardPower) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *NotifyPlayerOutCardPower) GetDowntime() int32 {
	if x != nil {
		return x.Downtime
	}
	return 0
}

var File_guandan_proto protoreflect.FileDescriptor

var file_guandan_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x22, 0x77, 0x0a,
	0x0b, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x44,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75,
	0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0x26,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x47, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x69, 0x64, 0x1a, 0x5b, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xb9, 0x17, 0x22, 0x64, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xba, 0x17,
	0x22, 0x6c, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x1f, 0x0a,
	0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xbd, 0x17, 0x22, 0x80,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xbe,
	0x17, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75,
	0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x05, 0x4d,
	0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xa2, 0x18, 0x22, 0x54, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x74, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10,
	0xbf, 0x17, 0x22, 0x62, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d,
	0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x02, 0x49, 0x44, 0x10, 0xc0, 0x17, 0x22, 0x70, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44,
	0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xa1, 0x18, 0x22, 0x80, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53,
	0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x9d, 0x18, 0x22, 0x67, 0x0a, 0x15, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49,
	0x44, 0x10, 0xa3, 0x18, 0x22, 0x32, 0x0a, 0x0d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xa4, 0x18, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x4f,
	0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f,
	0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x10, 0x02, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75,
	0x61, 0x6e, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x1f, 0x0a, 0x05, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x44, 0x10, 0xa5, 0x18,
	0x2a, 0x97, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x14,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x61, 0x6c, 0x6c,
	0x79, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x29, 0x2a, 0xd2, 0x02, 0x0a, 0x08, 0x44,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x50, 0x61, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x50, 0x61, 0x69, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6b,
	0x5f, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x69, 0x72, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x34, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x35, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x36, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x37, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x38, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x39, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6b, 0x5f,
	0x42, 0x6f, 0x6d, 0x62, 0x31, 0x30, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6b,
	0x5f, 0x42, 0x6f, 0x6d, 0x62, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x65, 0x63, 0x6b, 0x5f, 0x57, 0x69, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x11, 0x42,
	0x1d, 0x5a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0xaa,
	0x02, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x67, 0x75, 0x61, 0x6e, 0x64, 0x61, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_guandan_proto_rawDescOnce sync.Once
	file_guandan_proto_rawDescData = file_guandan_proto_rawDesc
)

func file_guandan_proto_rawDescGZIP() []byte {
	file_guandan_proto_rawDescOnce.Do(func() {
		file_guandan_proto_rawDescData = protoimpl.X.CompressGZIP(file_guandan_proto_rawDescData)
	})
	return file_guandan_proto_rawDescData
}

var file_guandan_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_guandan_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_guandan_proto_goTypes = []any{
	(StageType)(0),                        // 0: game.guandan.StageType
	(DeckType)(0),                         // 1: game.guandan.DeckType
	(ReqGameInfo_MSGID)(0),                // 2: game.guandan.ReqGameInfo.MSGID
	(RespGameInfo_MSGID)(0),               // 3: game.guandan.RespGameInfo.MSGID
	(ReqPlayerOutCards_MSGID)(0),          // 4: game.guandan.ReqPlayerOutCards.MSGID
	(RespPlayerOutCards_MSGID)(0),         // 5: game.guandan.RespPlayerOutCards.MSGID
	(NotifyPlayerOutCards_MSGID)(0),       // 6: game.guandan.NotifyPlayerOutCards.MSGID
	(ReqPlayerDoubleBet_MSGID)(0),         // 7: game.guandan.ReqPlayerDoubleBet.MSGID
	(RespPlayerDoubleBet_MSGID)(0),        // 8: game.guandan.RespPlayerDoubleBet.MSGID
	(NotifyPlayerDoubleBet_MSGID)(0),      // 9: game.guandan.NotifyPlayerDoubleBet.MSGID
	(NotifyGameStage_MSGID)(0),            // 10: game.guandan.NotifyGameStage.MSGID
	(NotifyPlayerHandCards_MSGID)(0),      // 11: game.guandan.NotifyPlayerHandCards.MSGID
	(NotifyPlayerDoubleBetPower_MSGID)(0), // 12: game.guandan.NotifyPlayerDoubleBetPower.MSGID
	(OutCardConf_OutCardPowerType)(0),     // 13: game.guandan.OutCardConf.OutCardPowerType
	(NotifyPlayerOutCardPower_MSGID)(0),   // 14: game.guandan.NotifyPlayerOutCardPower.MSGID
	(*OutCardInfo)(nil),                   // 15: game.guandan.OutCardInfo
	(*PlayerGameInfo)(nil),                // 16: game.guandan.PlayerGameInfo
	(*GameConf)(nil),                      // 17: game.guandan.GameConf
	(*GameInfo)(nil),                      // 18: game.guandan.GameInfo
	(*ReqGameInfo)(nil),                   // 19: game.guandan.ReqGameInfo
	(*RespGameInfo)(nil),                  // 20: game.guandan.RespGameInfo
	(*ReqPlayerOutCards)(nil),             // 21: game.guandan.ReqPlayerOutCards
	(*RespPlayerOutCards)(nil),            // 22: game.guandan.RespPlayerOutCards
	(*NotifyPlayerOutCards)(nil),          // 23: game.guandan.NotifyPlayerOutCards
	(*ReqPlayerDoubleBet)(nil),            // 24: game.guandan.ReqPlayerDoubleBet
	(*RespPlayerDoubleBet)(nil),           // 25: game.guandan.RespPlayerDoubleBet
	(*NotifyPlayerDoubleBet)(nil),         // 26: game.guandan.NotifyPlayerDoubleBet
	(*NotifyGameStage)(nil),               // 27: game.guandan.NotifyGameStage
	(*NotifyPlayerHandCards)(nil),         // 28: game.guandan.NotifyPlayerHandCards
	(*DoubleBetConf)(nil),                 // 29: game.guandan.DoubleBetConf
	(*NotifyPlayerDoubleBetPower)(nil),    // 30: game.guandan.NotifyPlayerDoubleBetPower
	(*OutCardConf)(nil),                   // 31: game.guandan.OutCardConf
	(*NotifyPlayerOutCardPower)(nil),      // 32: game.guandan.NotifyPlayerOutCardPower
	nil,                                   // 33: game.guandan.GameInfo.PlayerInfoEntry
}
var file_guandan_proto_depIdxs = []int32{
	1,  // 0: game.guandan.OutCardInfo.deck_type:type_name -> game.guandan.DeckType
	15, // 1: game.guandan.PlayerGameInfo.curr_out_card:type_name -> game.guandan.OutCardInfo
	0,  // 2: game.guandan.GameInfo.stage:type_name -> game.guandan.StageType
	17, // 3: game.guandan.GameInfo.conf:type_name -> game.guandan.GameConf
	33, // 4: game.guandan.GameInfo.player_info:type_name -> game.guandan.GameInfo.PlayerInfoEntry
	18, // 5: game.guandan.RespGameInfo.game_info:type_name -> game.guandan.GameInfo
	15, // 6: game.guandan.ReqPlayerOutCards.out_cards:type_name -> game.guandan.OutCardInfo
	15, // 7: game.guandan.NotifyPlayerOutCards.out_cards:type_name -> game.guandan.OutCardInfo
	0,  // 8: game.guandan.NotifyGameStage.last_stage:type_name -> game.guandan.StageType
	0,  // 9: game.guandan.NotifyGameStage.curr_stage:type_name -> game.guandan.StageType
	29, // 10: game.guandan.NotifyPlayerDoubleBetPower.conf:type_name -> game.guandan.DoubleBetConf
	13, // 11: game.guandan.OutCardConf.power_type:type_name -> game.guandan.OutCardConf.OutCardPowerType
	31, // 12: game.guandan.NotifyPlayerOutCardPower.conf:type_name -> game.guandan.OutCardConf
	16, // 13: game.guandan.GameInfo.PlayerInfoEntry.value:type_name -> game.guandan.PlayerGameInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_guandan_proto_init() }
func file_guandan_proto_init() {
	if File_guandan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_guandan_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OutCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GameConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ReqGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RespGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReqPlayerOutCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RespPlayerOutCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerOutCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReqPlayerDoubleBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RespPlayerDoubleBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerDoubleBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyGameStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerHandCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DoubleBetConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerDoubleBetPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OutCardConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guandan_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*NotifyPlayerOutCardPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_guandan_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_guandan_proto_goTypes,
		DependencyIndexes: file_guandan_proto_depIdxs,
		EnumInfos:         file_guandan_proto_enumTypes,
		MessageInfos:      file_guandan_proto_msgTypes,
	}.Build()
	File_guandan_proto = out.File
	file_guandan_proto_rawDesc = nil
	file_guandan_proto_goTypes = nil
	file_guandan_proto_depIdxs = nil
}
