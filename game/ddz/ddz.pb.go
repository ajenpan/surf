// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.18.1
// source: ddz.proto

package ddz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StageType int32

const (
	// stage 无需有序
	StageType_StageEmpty            StageType = 0    // 无效
	StageType_StageMatch            StageType = 11   // 匹配
	StageType_StageGameStart        StageType = 12   // 大局开局
	StageType_StageRoundStart       StageType = 13   // 小局开局
	StageType_StageTally            StageType = 14   // 小结算
	StageType_StageFinalResult      StageType = 15   // 大结算
	StageType_StageShuffleCards     StageType = 16   // 洗牌
	StageType_StageConfirmGradeCard StageType = 17   // 确定级牌
	StageType_StageConfirmGroupTag  StageType = 18   // 确定分组
	StageType_StageConfirmBanker    StageType = 19   // 确定庄家
	StageType_StageDealingCards     StageType = 20   // 发牌
	StageType_StageDealingLordCards StageType = 21   // 发地主牌
	StageType_StageDouble           StageType = 22   // 加倍
	StageType_StageOutCard          StageType = 23   // 打牌跟牌，对局阶段
	StageType_StageTribute          StageType = 24   // 进贡
	StageType_StageCallScoreLord    StageType = 25   // 叫分 1,2,3分并确定地主
	StageType_StageCallLord         StageType = 26   // 叫地主, 抢地主
	StageType_StageShowCardLord     StageType = 27   // 敞牌叫地主，明牌叫地主
	StageType_StageShowCardDouble   StageType = 28   // 明牌加倍
	StageType_StageDebugMakeCards   StageType = 1001 // 调试
)

// Enum value maps for StageType.
var (
	StageType_name = map[int32]string{
		0:    "StageEmpty",
		11:   "StageMatch",
		12:   "StageGameStart",
		13:   "StageRoundStart",
		14:   "StageTally",
		15:   "StageFinalResult",
		16:   "StageShuffleCards",
		17:   "StageConfirmGradeCard",
		18:   "StageConfirmGroupTag",
		19:   "StageConfirmBanker",
		20:   "StageDealingCards",
		21:   "StageDealingLordCards",
		22:   "StageDouble",
		23:   "StageOutCard",
		24:   "StageTribute",
		25:   "StageCallScoreLord",
		26:   "StageCallLord",
		27:   "StageShowCardLord",
		28:   "StageShowCardDouble",
		1001: "StageDebugMakeCards",
	}
	StageType_value = map[string]int32{
		"StageEmpty":            0,
		"StageMatch":            11,
		"StageGameStart":        12,
		"StageRoundStart":       13,
		"StageTally":            14,
		"StageFinalResult":      15,
		"StageShuffleCards":     16,
		"StageConfirmGradeCard": 17,
		"StageConfirmGroupTag":  18,
		"StageConfirmBanker":    19,
		"StageDealingCards":     20,
		"StageDealingLordCards": 21,
		"StageDouble":           22,
		"StageOutCard":          23,
		"StageTribute":          24,
		"StageCallScoreLord":    25,
		"StageCallLord":         26,
		"StageShowCardLord":     27,
		"StageShowCardDouble":   28,
		"StageDebugMakeCards":   1001,
	}
)

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}

func (x StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddz_proto_enumTypes[0].Descriptor()
}

func (StageType) Type() protoreflect.EnumType {
	return &file_ddz_proto_enumTypes[0]
}

func (x StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageType.Descriptor instead.
func (StageType) EnumDescriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{0}
}

type LordType int32

const (
	LordType_LordTypeNone   LordType = 0 // 无效
	LordType_LordTypeLord   LordType = 1 // 地主
	LordType_LordTypeFarmer LordType = 2 // 农民
)

// Enum value maps for LordType.
var (
	LordType_name = map[int32]string{
		0: "LordTypeNone",
		1: "LordTypeLord",
		2: "LordTypeFarmer",
	}
	LordType_value = map[string]int32{
		"LordTypeNone":   0,
		"LordTypeLord":   1,
		"LordTypeFarmer": 2,
	}
)

func (x LordType) Enum() *LordType {
	p := new(LordType)
	*p = x
	return p
}

func (x LordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LordType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddz_proto_enumTypes[1].Descriptor()
}

func (LordType) Type() protoreflect.EnumType {
	return &file_ddz_proto_enumTypes[1]
}

func (x LordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LordType.Descriptor instead.
func (LordType) EnumDescriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{1}
}

type DeckType int32

const (
	DeckType_dt_unknow         DeckType = 0
	DeckType_dt_single         DeckType = 1 // 单张
	DeckType_dt_pair           DeckType = 2 // 对子
	DeckType_dt_three          DeckType = 3 // 3张
	DeckType_dt_three_with_one DeckType = 4 // 3带1
	DeckType_dt_three_with_two DeckType = 5 // 3带2
	DeckType_dt_straight       DeckType = 6 // 顺子
	DeckType_dt_bomb           DeckType = 7 // 炸弹
)

// Enum value maps for DeckType.
var (
	DeckType_name = map[int32]string{
		0: "dt_unknow",
		1: "dt_single",
		2: "dt_pair",
		3: "dt_three",
		4: "dt_three_with_one",
		5: "dt_three_with_two",
		6: "dt_straight",
		7: "dt_bomb",
	}
	DeckType_value = map[string]int32{
		"dt_unknow":         0,
		"dt_single":         1,
		"dt_pair":           2,
		"dt_three":          3,
		"dt_three_with_one": 4,
		"dt_three_with_two": 5,
		"dt_straight":       6,
		"dt_bomb":           7,
	}
)

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}

func (x DeckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddz_proto_enumTypes[2].Descriptor()
}

func (DeckType) Type() protoreflect.EnumType {
	return &file_ddz_proto_enumTypes[2]
}

func (x DeckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckType.Descriptor instead.
func (DeckType) EnumDescriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{2}
}

type ActionType int32

const (
	ActionType_at_unknow      ActionType = 0
	ActionType_at_ready       ActionType = 1
	ActionType_at_rob_lord    ActionType = 10 // 抢地主
	ActionType_at_giveup_lord ActionType = 11 // 放弃地主
	ActionType_at_show_card   ActionType = 20 // 明牌
	ActionType_at_double_bet  ActionType = 21 // 加倍
	ActionType_at_out_card    ActionType = 30 // 出牌
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "at_unknow",
		1:  "at_ready",
		10: "at_rob_lord",
		11: "at_giveup_lord",
		20: "at_show_card",
		21: "at_double_bet",
		30: "at_out_card",
	}
	ActionType_value = map[string]int32{
		"at_unknow":      0,
		"at_ready":       1,
		"at_rob_lord":    10,
		"at_giveup_lord": 11,
		"at_show_card":   20,
		"at_double_bet":  21,
		"at_out_card":    30,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddz_proto_enumTypes[3].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_ddz_proto_enumTypes[3]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{3}
}

type OutCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   int32    `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	DeckType DeckType `protobuf:"varint,2,opt,name=deck_type,json=deckType,proto3,enum=game.ddz.DeckType" json:"deck_type,omitempty"`
	Cards    []byte   `protobuf:"bytes,3,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *OutCardInfo) Reset() {
	*x = OutCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutCardInfo) ProtoMessage() {}

func (x *OutCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ddz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutCardInfo.ProtoReflect.Descriptor instead.
func (*OutCardInfo) Descriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{0}
}

func (x *OutCardInfo) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *OutCardInfo) GetDeckType() DeckType {
	if x != nil {
		return x.DeckType
	}
	return DeckType_dt_unknow
}

func (x *OutCardInfo) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type PlayerGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId      int32          `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Ready       int32          `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
	BankerRob   int32          `protobuf:"varint,4,opt,name=banker_rob,json=bankerRob,proto3" json:"banker_rob,omitempty"` // 抢庄
	LordType    LordType       `protobuf:"varint,5,opt,name=lord_type,json=lordType,proto3,enum=game.ddz.LordType" json:"lord_type,omitempty"`
	BetRate     int32          `protobuf:"varint,6,opt,name=bet_rate,json=betRate,proto3" json:"bet_rate,omitempty"`      // 下注倍率
	HandCards   []byte         `protobuf:"bytes,7,opt,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` //
	CurrOutCard []*OutCardInfo `protobuf:"bytes,8,rep,name=curr_out_card,json=currOutCard,proto3" json:"curr_out_card,omitempty"`
}

func (x *PlayerGameInfo) Reset() {
	*x = PlayerGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGameInfo) ProtoMessage() {}

func (x *PlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ddz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGameInfo.ProtoReflect.Descriptor instead.
func (*PlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerGameInfo) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *PlayerGameInfo) GetReady() int32 {
	if x != nil {
		return x.Ready
	}
	return 0
}

func (x *PlayerGameInfo) GetBankerRob() int32 {
	if x != nil {
		return x.BankerRob
	}
	return 0
}

func (x *PlayerGameInfo) GetLordType() LordType {
	if x != nil {
		return x.LordType
	}
	return LordType_LordTypeNone
}

func (x *PlayerGameInfo) GetBetRate() int32 {
	if x != nil {
		return x.BetRate
	}
	return 0
}

func (x *PlayerGameInfo) GetHandCards() []byte {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerGameInfo) GetCurrOutCard() []*OutCardInfo {
	if x != nil {
		return x.CurrOutCard
	}
	return nil
}

type ActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId int32     `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	Stage  StageType `protobuf:"varint,2,opt,name=stage,proto3,enum=game.ddz.StageType" json:"stage,omitempty"`
}

func (x *ActionInfo) Reset() {
	*x = ActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInfo) ProtoMessage() {}

func (x *ActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ddz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInfo.ProtoReflect.Descriptor instead.
func (*ActionInfo) Descriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{2}
}

func (x *ActionInfo) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *ActionInfo) GetStage() StageType {
	if x != nil {
		return x.Stage
	}
	return StageType_StageEmpty
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage            StageType                 `protobuf:"varint,1,opt,name=stage,proto3,enum=game.ddz.StageType" json:"stage,omitempty"`
	CurrActionSeatId int32                     `protobuf:"varint,2,opt,name=curr_action_seat_id,json=currActionSeatId,proto3" json:"curr_action_seat_id,omitempty"` // 当前操作玩家
	PlayerInfo       map[int32]*PlayerGameInfo `protobuf:"bytes,5,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ddz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_ddz_proto_rawDescGZIP(), []int{3}
}

func (x *GameInfo) GetStage() StageType {
	if x != nil {
		return x.Stage
	}
	return StageType_StageEmpty
}

func (x *GameInfo) GetCurrActionSeatId() int32 {
	if x != nil {
		return x.CurrActionSeatId
	}
	return 0
}

func (x *GameInfo) GetPlayerInfo() map[int32]*PlayerGameInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

var File_ddz_proto protoreflect.FileDescriptor

var file_ddz_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x64, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x64, 0x64, 0x7a, 0x22, 0x6d, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x64, 0x64, 0x7a, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x52, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x64, 0x64, 0x7a, 0x2e, 0x4c, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x64,
	0x64, 0x7a, 0x2e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x64, 0x64, 0x7a, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x64, 0x64, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x64, 0x64, 0x7a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x57, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x64, 0x64, 0x7a, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0xba, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10,
	0x11, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x72, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x72, 0x64,
	0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x6f, 0x72, 0x64, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x72, 0x64, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0xe9, 0x07, 0x2a,
	0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x65,
	0x72, 0x10, 0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x64, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x64,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x65, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x64, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x74, 0x77, 0x6f, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x74, 0x5f, 0x62,
	0x6f, 0x6d, 0x62, 0x10, 0x07, 0x2a, 0x84, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x62, 0x5f, 0x6c, 0x6f, 0x72, 0x64,
	0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x75, 0x70, 0x5f,
	0x6c, 0x6f, 0x72, 0x64, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x61,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x10, 0x1e, 0x42, 0x1b, 0x5a, 0x0e,
	0x2e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x64, 0x64, 0x7a, 0x3b, 0x64, 0x64, 0x7a, 0xaa, 0x02,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x64, 0x64, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ddz_proto_rawDescOnce sync.Once
	file_ddz_proto_rawDescData = file_ddz_proto_rawDesc
)

func file_ddz_proto_rawDescGZIP() []byte {
	file_ddz_proto_rawDescOnce.Do(func() {
		file_ddz_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddz_proto_rawDescData)
	})
	return file_ddz_proto_rawDescData
}

var file_ddz_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ddz_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ddz_proto_goTypes = []any{
	(StageType)(0),         // 0: game.ddz.StageType
	(LordType)(0),          // 1: game.ddz.LordType
	(DeckType)(0),          // 2: game.ddz.DeckType
	(ActionType)(0),        // 3: game.ddz.ActionType
	(*OutCardInfo)(nil),    // 4: game.ddz.OutCardInfo
	(*PlayerGameInfo)(nil), // 5: game.ddz.PlayerGameInfo
	(*ActionInfo)(nil),     // 6: game.ddz.ActionInfo
	(*GameInfo)(nil),       // 7: game.ddz.GameInfo
	nil,                    // 8: game.ddz.GameInfo.PlayerInfoEntry
}
var file_ddz_proto_depIdxs = []int32{
	2, // 0: game.ddz.OutCardInfo.deck_type:type_name -> game.ddz.DeckType
	1, // 1: game.ddz.PlayerGameInfo.lord_type:type_name -> game.ddz.LordType
	4, // 2: game.ddz.PlayerGameInfo.curr_out_card:type_name -> game.ddz.OutCardInfo
	0, // 3: game.ddz.ActionInfo.stage:type_name -> game.ddz.StageType
	0, // 4: game.ddz.GameInfo.stage:type_name -> game.ddz.StageType
	8, // 5: game.ddz.GameInfo.player_info:type_name -> game.ddz.GameInfo.PlayerInfoEntry
	5, // 6: game.ddz.GameInfo.PlayerInfoEntry.value:type_name -> game.ddz.PlayerGameInfo
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ddz_proto_init() }
func file_ddz_proto_init() {
	if File_ddz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ddz_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OutCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddz_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddz_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddz_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddz_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddz_proto_goTypes,
		DependencyIndexes: file_ddz_proto_depIdxs,
		EnumInfos:         file_ddz_proto_enumTypes,
		MessageInfos:      file_ddz_proto_msgTypes,
	}.Build()
	File_ddz_proto = out.File
	file_ddz_proto_rawDesc = nil
	file_ddz_proto_goTypes = nil
	file_ddz_proto_depIdxs = nil
}
